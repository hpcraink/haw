upstream backend_hosts {
  server backend:3000;
}

server {
  listen 80; # listen for ipv4; this line is default and implied
  listen [::]:80 default ipv6only=on; # listen for ipv6
  server_name $host; # make site accessible from http://localhost/
  return 301 https://$host$request_uri; # redirect all http trafic to https,
                                        # instead of $ host you may redirect to actual server_name for security
}

# In case you want 'www' addresses to be automatically redirected without 'www'.
server {
  listen 80;
  listen 443;
  #server_name www.192.168.1.99;
  #return 301 https://192.168.1.99$request_uri;
  server_name hpc@haw-app;
  return 301 https://$host$request_uri;
}

server {
  # "deferred" reduces the number of formalities between the server and client.
  listen 443 default deferred http2;
  #server_name $uri; #192.168.1.99;

  # Ensure timeouts are equal across browsers and raise the max content-length size.
  keepalive_timeout 60;
  client_max_body_size 5m;

  # SSL goodness.
  ssl                       on;
  ssl_certificate           /etc/ssl/certs/haw-app.crt;
  ssl_certificate_key       /etc/ssl/private/haw-app.key;
  ssl_session_cache         shared:SSL:50m;
  ssl_session_timeout       5m;
  ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers               "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA";
  ssl_dhparam               /etc/ssl/private/dhparam.pem;
  ssl_ecdh_curve            secp384r1;
  add_header                Strict-Transport-Security 'max-age=63072000; includeSubDomains;' always;

  # Disallow access to hidden files and directories.
  location ~ /\. {
    return 404;
    access_log off;
    log_not_found off;
  }

  # Set static files location
  root /usr/share/nginx/html;

  # Proxy headers (global)
  #proxy_set_header Host $host;
  #proxy_set_header X-Forwarded-Proto $scheme;
  #proxy_set_header X-Real-IP $remote_addr;
  #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #proxy_redirect off;
  #underscores_in_headers on;

  location / {
    #include cors_support.conf;
    try_files $uri $uri/ $uri/index.html $uri.html /index.html;
  }

  # Static file caching. All files with following extensions will be cached 1 day.
#  location ~* /\.(jpg|jpeg|png|gif|ico|css|js)$ {
#    expires 1d;
#  }

  #location /statistic {
  #  proxy_pass https://backend_hosts;
  #}
#

  # location matcher for GET requests.
  location ~* /(message|statistic|user) {
    include cors_support.conf;
    resolver 127.0.0.11; # Docker integrated DNS server
    #proxy_pass https://backend:3000/message$is_args$query_string;
    proxy_pass http://backend_hosts$request_uri;
    #proxy_pass https://backend_hosts$request_uri;
  }

#  # location matcher for POST requests
#  location ~ ^/message/(?<section>.*) {
#    include cors_support.conf;
#    #resolver 172.18.0.0;
#    resolver 127.0.0.11;
#    proxy_pass https://backend:3000/message/$section;
#  }

  # Attempt to load the favicon or fall back to status code 204.
  location = /favicon.ico {
    try_files $uri /images/favicon.ico =204;
    access_log off;
    log_not_found off;
  }

}
